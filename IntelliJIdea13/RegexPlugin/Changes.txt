Version 0.6.3
- Fixes hang on startup with IntelliJ X.

Version 0.6.2
- Fixes for the 94.539 EAP (FLAVOR not found error).

Version 0.6.1
- Update for IntelliJ 9

Version 0.6.0

- Added toolbar buttons to create a new regex and delete the current
  one.  This makes the library handling a little more convenient.

- Added the option to show labels for the toolbar buttons that refer
  to regex flags.  I can never keep track of which icon represents
  which completely abstract concept.  This is a menu option.  I wasn't
  able to work out how best to do this dynamically so right now you
  have to restart so see this change.

- Changed the way copy and paste happens in the regex editor so that
  you can copy segments of the regular expression and paste them back
  to the editor without having them changed to java strings.

- Added support for Paste Simple (in Idea) allowing for a regex string
  to be pasted in as plain text rather than escaped as usual.

- Fixed the fonts used in the plugin so that they are fixed pitch
  again (I think that one of the IntelliJ IDEA releases changed the
  default here).

- Fix plugin so that it saves its state to the workspace rather than
  the project file.

- Fixed the copy code so that it it copies that part of the regular
  expression that has been selected.

- Changed the reference card pane so that there are closers on the
  splitter again.

- Removed the popup reference window. I really don't think that it was
  useful particularly because it can go behind the main IDEA window.

- Fixed a race condition (null pointer exception) in the stand alone
  swing app.

- Added icons to menu.

- Fixed a bug that could cause the regex library to get corrupted.

Version 0.5.9

- dockable reference card in addition to the popup

- ctrl-c in regexeditor copies the regex as java string

Version 0.5.8

- dockable reference card in addition to the popup

- ctrl-c in regexeditor copies the regex as java string

Version 0.5.7

- smaller icons

- consistent l&f with the idea project toggle buttons (short
  description in the statusbar and ind the tooltips)

- referencepage moved into the menu

- iconhelp with some more information on how the buttons really work

Version 0.5.6

- added a little documentation for referencing of groups in the
  replacestring

- usage of icons instead of checkboxes for the flags and buttons in
  the toolbar

- toggleable autosearch (for huge searchtexts)

Version 0.5.5

- Import Text Action

- Refactoring

- Entered all requested ressources into the properties file

- refactoring of the menucreation methods

Version 0.5.4

It turns out that the Java Preferences API has a bug that causes it to
remove new lines when importing and exporting preferences files.
Since this is the API that I use for library import and export, this
effectively broke all multiline exports :( FYI the bug is on the bug
parade at:
http://developer.java.sun.com/developer/bugParade/bugs/4868444.html.
This version contains a work around for this bug (though it does make
the xml somewhat more ugly to read).

Version 0.5.3

Fixes: Don't put ampersands in the xml, trying to get my name and
Christian's in there with an ampersand caused IDEA to barf when
downloading the plugin list, even though it was able to parse the
headers when generated locally.

Fixed a case problem causeing the plugin to describe itself as both
RegexPlugin and regexPlugin, this caused the version detection to
claim that the plugin wasn't installed.

Version 0.5.1

Fixed a NPE when creating a new project.

Version 0.5.0

Added support for storing regexes to a library, expressions are saved
automatically.  Expressions can also be exported and imported to the
library. Refactored the UI again.

Version 0.4.x

Various internal builds supporting stand alone execution.  You can now
run the plugin as a stand alone application by executing the jar
directly.

java -jar regexPlugin.jar

Version 0.3.x

Refactored the UI to better support multilined, commented regular
expressions.

This allows for patterns such as:

# insert
(?:
  (i):
  ([0-9]+):(.*)
)
|
# delete
(?:
  (d):
  (?:
    ([0-9]+)
    |
    ([0-9]+)-([0-9]+)
  )
)
|
# modify
(?:
  (m):
  (?:
    ([0-9]+)
    |
    ([0-9]+)-([0-9]+)
  ):
  (.*)
)
|
# replace
(?:
  (r):(.*):(.*)
)

To be used.

Against such test text as:

  d:12
  m:12-34:foobar
  i:12:another line
  a:failing text
  r:Some Pattern:Replacement

As well as more traditional patterns such as:

((?:\S*)@(?:\S*))\s*\((.*)\)|(.*)\s*<((?:\S*)@(?:\S*))>

String s = "((?:\\S*)@(?:\\S*))\\s*\\((.*)\\)|(.*)\\s*<((?:\\S*)@(?:\\S*))>";

for matching email addresses.

guy@wyrdrune.com (Guy Gascoigne-Piggford)
Guy Gascoigne-Piggford <guy@wyrdrune.com>

---------------------------------------------------------------------------------------------------------------
Added a splitter to separate the results and the details panes.
Exposed some of the Pattern compilation flags to the UI.

Added buttons to copy the pattern over to a correctly formatted Java
String, and back again.  Note, the function of these two buttons is
affected by the state of the comments flag in the UI since this flag
causes white space to be ignored in the regular expression.

With the following in the Pattern area:

((?:\S*)@(?:\S*))\s*\((.*)\)|(.*)\s*<((?:\S*)@(?:\S*))>

clicking on the 'Copy Pattern to String' button will put:

"((?:\\S*)@(?:\\S*))\\s*\\((.*)\\)|(.*)\\s*<((?:\\S*)@(?:\\S*))>"

On the clipboard, reasy for pasting into your source.

Likewise selecting the whole java string and clicking on the 'Copy
String to Pattern' button will do it's best to parse the string
declaration and paste it into the pattern window as a valid Pattern.

e.g:

Selecting all of:

String s =
"(?:                    \n" +
"  (d):                 \n" +
"  (?:                  \n" +
"    ([0-9]+)           \n" +
"    |                  \n" +
"    ([0-9]+)-([0-9]+)  \n" +
"  )                    \n" +
")                      \n";

and clicking on the 'Copy String to Pattern' will paste:

(?:
  (d):
  (?:
    ([0-9]+)
    |
    ([0-9]+)-([0-9]+)
  )
)

into the pattern window ready for testing.
